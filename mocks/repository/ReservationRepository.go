// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	entity "git.garena.com/sea-labs-id/batch-05/adithya-kurniawan/final-project/house-booking-be/entity"
	mock "github.com/stretchr/testify/mock"
)

// ReservationRepository is an autogenerated mock type for the ReservationRepository type
type ReservationRepository struct {
	mock.Mock
}

// AddReservation provides a mock function with given fields: _a0
func (_m *ReservationRepository) AddReservation(_a0 *entity.Reservation) (*entity.Reservation, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Reservation
	if rf, ok := ret.Get(0).(func(*entity.Reservation) *entity.Reservation); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Reservation) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReservationRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewReservationRepository creates a new instance of ReservationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReservationRepository(t mockConstructorTestingTNewReservationRepository) *ReservationRepository {
	mock := &ReservationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
